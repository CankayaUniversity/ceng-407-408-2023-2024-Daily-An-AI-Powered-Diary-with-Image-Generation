basePath: /api
definitions:
  model.CreateDailyDTO:
    properties:
      image:
        type: string
      isShared:
        type: boolean
      text:
        type: string
    required:
    - isShared
    - text
    type: object
  model.Daily:
    properties:
      author:
        type: string
      createdAt:
        type: integer
      emotions:
        $ref: '#/definitions/model.Emotion'
      favourites:
        type: integer
      id:
        type: string
      image:
        type: string
      isShared:
        type: boolean
      keywords:
        items:
          type: string
        type: array
      text:
        type: string
      viewers:
        items:
          type: string
        type: array
    required:
    - text
    type: object
  model.Emotion:
    properties:
      anger:
        type: integer
      happiness:
        type: integer
      sadness:
        type: integer
      shock:
        type: integer
    type: object
  model.User:
    properties:
      createdAt:
        type: integer
      email:
        type: string
      favouriteDailies:
        items:
          type: string
        type: array
      id:
        type: string
      password:
        type: string
      role:
        type: string
      viewedDailies:
        items:
          type: string
        type: array
    required:
    - email
    - password
    type: object
  model.UserLoginDTO:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  model.UserRegisterDTO:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
host: localhost:9090
info:
  contact: {}
  title: Daily API
  version: "1.0"
paths:
  /api/daily:
    post:
      consumes:
      - application/json
      description: creates a new daily resource
      parameters:
      - description: CreateDailyDTO
        in: body
        name: daily
        required: true
        schema:
          $ref: '#/definitions/model.CreateDailyDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Daily'
        "400":
          description: 'Bad Request {"message'': "Invalid JSON data"}'
          schema:
            type: object
        "502":
          description: 'Bad Gateway {"message'': "Couldn''t fetch the image"}'
          schema:
            type: object
      security:
      - ApiKeyAuth: []
      summary: returns the created daily
      tags:
      - Daily
  /api/daily/{id}:
    get:
      consumes:
      - application/json
      description: return a specific daily via daily.ID
      parameters:
      - description: Daily ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Daily'
        "400":
          description: 'Bad Request {"message": "Invalid JSON data"}'
          schema:
            type: object
        "502":
          description: 'Bad Gateway {"message'': "mongo: no documents in result"}'
          schema:
            type: object
      security:
      - ApiKeyAuth: []
      summary: return a daily
      tags:
      - Daily
  /api/daily/list:
    get:
      consumes:
      - application/json
      description: returns a list of dailies
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Daily'
            type: array
        "500":
          description: 'Bad Gateway {"message'': "Couldn''t fetch the image"}'
          schema:
            type: object
      security:
      - ApiKeyAuth: []
      summary: returns a list of dailies
      tags:
      - Daily
  /api/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user using the provided email and password, and
        return a token on successful authentication.
      parameters:
      - description: User login details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UserLoginDTO'
      produces:
      - application/json
      responses:
        "200":
          description: Token
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'Bad Request {"message'': "Invalid JSON data"}'
          schema:
            type: object
      summary: User login
      tags:
      - Users
  /api/register:
    post:
      consumes:
      - application/json
      description: Create a new user with the given email and password, if they don't
        exist already.
      parameters:
      - description: User Registration
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.UserRegisterDTO'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "400":
          description: 'Bad Request {"message'': "Invalid JSON data"}'
          schema:
            type: object
        "502":
          description: 'Bad Gateway {"message'': "Couldn''t fetch the image"}'
          schema:
            type: object
      summary: Register a new user
      tags:
      - Users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
